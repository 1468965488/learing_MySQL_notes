mysql
学生表
	student
	学号
	姓名
	性别
	出生日期
	所在班级
 create table student(
    -> s_num varchar(20) primary key,
    -> s_name varchar(20) not null,
    -> s_sex varchar(20) not null,
    -> s_birthday datetime,
    -> class varchar(20));



教师表
	teacher	
	教师编号
	教师姓名
	出生年月日
	职称
	所在部门
mysql> create table teacher(
    -> t_num varchar(20) primary key,
    -> t_name varchar(20) not null,
    -> t_sex varchar(10) not null,
    -> t_birthday datetime,
    -> prof varchar(20) not null,
    -> depart varchar(20) not null);
Query OK, 0 rows affected (0.03 sec)



课程表
	course
	课程号
	课程名称
	教师编号
mysql> create table course(
    -> c_num varchar(20) primary key,
    -> c_name varchar(20) not null,
    -> t_num varchar(20) not null,
    -> foreign key(t_num) references teacher(t_num));
Query OK, 0 rows affected (0.03 sec)

成绩表
	score	
	学号
	课程号
	成绩
mysql> create table score(
    -> c_num varchar(20) not null,
    -> s_num varchar(20) not null,
    -> degree decimal,
    -> foreign key(s_num) references student(s_num),
    -> foreign key(c_num) references course(c_num),
    -> primary key(s_num, c_num));


然后添加学生表数据

mysql> insert into student values('101', '薛勇', '男', '1997-09-01', '95033');
Query OK, 1 row affected (0.00 sec)

mysql> insert into student values('102', '王琪', '女', '1997-03-21', '95031');
Query OK, 1 row affected (0.00 sec)

mysql> insert into student values('103', '赵国顺', '男', '1998-06-22', '95033');
Query OK, 1 row affected (0.00 sec)

mysql> insert into student values('104', '刘奕鑫', '男', '1999-08-29', '95033');
Query OK, 1 row affected (0.00 sec)

mysql> insert into student values('105', '赵建威', '男', '1999-04-29', '95031');
Query OK, 1 row affected (0.00 sec)

mysql> insert into student values('106', '王进兴', '男', '1999-07-30', '95031');
Query OK, 1 row affected (0.00 sec)

mysql> insert into student values('107', '张康情', '男', '1998-02-10', '95031');
Query OK, 1 row affected (0.00 sec)

mysql> insert into student values('108', '刘清', '男', '1998-06-10', '95033');
Query OK, 1 row affected (0.00 sec)

mysql> insert into student values('109', '王宝春', '男', '1998-10-10', '95031');
Query OK, 1 row affected (0.00 sec)
mysql> select * from student;

+-------+--------+-------+---------------------+-------+
| s_num | s_name | s_sex | s_birthday          | class |
+-------+--------+-------+---------------------+-------+
| 101   | 薛勇   | 男    | 1997-09-01 00:00:00 | 95033 |
| 102   | 王琪   | 女    | 1997-03-21 00:00:00 | 95031 |
| 103   | 赵国顺 | 男    | 1998-06-22 00:00:00 | 95033 |
| 104   | 刘奕鑫 | 男    | 1999-08-29 00:00:00 | 95033 |
| 105   | 赵建威 | 男    | 1999-04-29 00:00:00 | 95031 |
| 106   | 王进兴 | 男    | 1999-07-30 00:00:00 | 95031 |
| 107   | 张康情 | 男    | 1998-02-10 00:00:00 | 95031 |
| 108   | 刘清   | 男    | 1998-06-10 00:00:00 | 95033 |
| 109   | 王宝春 | 男    | 1998-10-10 00:00:00 | 95031 |
+-------+--------+-------+---------------------+-------+

添加教师表数据
mysql> insert into teacher values('804', '李诚', '男', '1958-12-02', '副教授', '计算机系');
Query OK, 1 row affected (0.00 sec)

mysql> insert into teacher values('856', '张旭', '男', '1969-03-02', '讲师', '机械电子工程系');
Query OK, 1 row affected (0.00 sec)

mysql> insert into teacher values('825', '王萍', '女', '1969-03-02', '教授', '计算机系');
Query OK, 1 row affected (0.00 sec)

mysql> insert into teacher values('831', '刘冰', '女', '1977-08-14', '教授', '机械电子工程系');
Query OK, 1 row affected (0.00 sec)

mysql> select * from teacher;
+-------+--------+-------+---------------------+--------+----------------+
| t_num | t_name | t_sex | t_birthday          | prof   | depart         |
+-------+--------+-------+---------------------+--------+----------------+
| 804   | 李诚   | 男    | 1958-12-02 00:00:00 | 副教授 | 计算机系       |
| 825   | 王萍   | 女    | 1969-03-02 00:00:00 | 教授   | 计算机系       |
| 831   | 刘冰   | 女    | 1977-08-14 00:00:00 | 教授   | 机械电子工程系 |
| 856   | 张旭   | 男    | 1969-03-02 00:00:00 | 讲师   | 机械电子工程系 |
+-------+--------+-------+---------------------+--------+----------------+

添加课程表数据
mysql> insert into course values('3-105', '计算机导论', '825');
Query OK, 1 row affected (0.00 sec)

mysql> insert into course values('3-245', '操作系统', '804');
Query OK, 1 row affected (0.00 sec)

mysql> insert into course values('3-166', '数字电路', '856');
Query OK, 1 row affected (0.00 sec)

mysql> insert into course values('9-878', '高等数学', '831');
Query OK, 1 row affected (0.00 sec)

mysql> select * from course;
+-------+------------+-------+
| c_num | c_name     | t_num |
+-------+------------+-------+
| 3-105 | 计算机导论 | 825   |
| 3-166 | 数字电路   | 856   |
| 3-245 | 操作系统   | 804   |
| 9-878 | 高等数学   | 831   |
+-------+------------+-------+

添加成绩表数据

mysql> select * from score;
+-------+-------+--------+
| s_num | c_num | defree |
+-------+-------+--------+
| 103   | 3-105 |     82 |
| 103   | 3-166 |     98 |
| 103   | 3-245 |     86 |
| 105   | 3-105 |     75 |
| 105   | 3-166 |     67 |
| 105   | 3-245 |     75 |
| 109   | 3-105 |     99 |
| 109   | 3-166 |     78 |
| 109   | 3-245 |     68 |
+-------+-------+--------+


数据库查询练习
1： 查询student中所有数据
mysql> select * from student;
+-------+--------+-------+---------------------+-------+
| s_num | s_name | s_sex | s_birthday          | class |
+-------+--------+-------+---------------------+-------+
| 101   | 薛勇   | 男    | 1997-09-01 00:00:00 | 95033 |
| 102   | 王琪   | 女    | 1997-03-21 00:00:00 | 95031 |
| 103   | 赵国顺 | 男    | 1998-06-22 00:00:00 | 95033 |
| 104   | 刘奕鑫 | 男    | 1999-08-29 00:00:00 | 95033 |
| 105   | 赵建威 | 男    | 1999-04-29 00:00:00 | 95031 |
| 106   | 王进兴 | 男    | 1999-07-30 00:00:00 | 95031 |
| 107   | 张康情 | 男    | 1998-02-10 00:00:00 | 95031 |
| 108   | 刘清   | 男    | 1998-06-10 00:00:00 | 95033 |
| 109   | 王宝春 | 男    | 1998-10-10 00:00:00 | 95031 |
+-------+--------+-------+---------------------+-------+
9 rows in set (0.00 sec)
2： 查询student中所有记录的s_name, s_sex, _class 列

mysql> select s_name, s_sex, class from student;
+--------+-------+-------+
| s_name | s_sex | class |
+--------+-------+-------+
| 薛勇   | 男    | 95033 |
| 王琪   | 女    | 95031 |
| 赵国顺 | 男    | 95033 |
| 刘奕鑫 | 男    | 95033 |
| 赵建威 | 男    | 95031 |
| 王进兴 | 男    | 95031 |
| 张康情 | 男    | 95031 |
| 刘清   | 男    | 95033 |
| 王宝春 | 男    | 95031 |
+--------+-------+-------+
9 rows in set (0.00 sec)

3： 查询教师所有的单位即不重复的depart列
mysql> select distinct depart from teacher;
+----------------+
| depart         |
+----------------+
| 计算机系       |
| 机械电子工程系 |
+----------------+

查询结果不会重复了

4查询score中60到80之间的所有记录
查询区间 between 。。。 and 。。。
mysql> select * from score where defree between 60 and 80;
+-------+-------+--------+
| s_num | c_num | defree |
+-------+-------+--------+
| 105   | 3-105 |     75 |
| 105   | 3-166 |     67 |
| 105   | 3-245 |     75 |
| 109   | 3-166 |     78 |
| 109   | 3-245 |     68 |
+-------+-------+--------+

或者可以
mysql> select * from score where defree > 60 and defree < 80;
+-------+-------+--------+
| s_num | c_num | defree |
+-------+-------+--------+
| 105   | 3-105 |     75 |
| 105   | 3-166 |     67 |
| 105   | 3-245 |     75 |
| 109   | 3-166 |     78 |
| 109   | 3-245 |     68 |
+-------+-------+--------+


5：查询score中成绩为85， 86， 88的记录

表示或者关系的查询  可以用in关键字

mysql> select * from score where defree in(82, 85, 86, 100);
+-------+-------+--------+
| s_num | c_num | defree |
+-------+-------+--------+
| 103   | 3-105 |     82 |
| 103   | 3-245 |     86 |
+-------+-------+--------+

6： 查询student表中95031班或者性别为女的同学

mysql> select * from student where class='95031' or s_sex='女';
+-------+--------+-------+---------------------+-------+
| s_num | s_name | s_sex | s_birthday          | class |
+-------+--------+-------+---------------------+-------+
| 102   | 王琪   | 女    | 1997-03-21 00:00:00 | 95031 |
| 105   | 赵建威 | 男    | 1999-04-29 00:00:00 | 95031 |
| 106   | 王进兴 | 男    | 1999-07-30 00:00:00 | 95031 |
| 107   | 张康情 | 男    | 1998-02-10 00:00:00 | 95031 |
| 109   | 王宝春 | 男    | 1998-10-10 00:00:00 | 95031 |
+-------+--------+-------+---------------------+-------+


7： 升序降序如何查询
降序为 order by ... desc 
升序为 order by ... asc
默认也为升序
mysql> select * from student order by class desc;
+-------+--------+-------+---------------------+-------+
| s_num | s_name | s_sex | s_birthday          | class |
+-------+--------+-------+---------------------+-------+
| 101   | 薛勇   | 男    | 1997-09-01 00:00:00 | 95033 |
| 103   | 赵国顺 | 男    | 1998-06-22 00:00:00 | 95033 |
| 104   | 刘奕鑫 | 男    | 1999-08-29 00:00:00 | 95033 |
| 108   | 刘清   | 男    | 1998-06-10 00:00:00 | 95033 |
| 102   | 王琪   | 女    | 1997-03-21 00:00:00 | 95031 |
| 105   | 赵建威 | 男    | 1999-04-29 00:00:00 | 95031 |
| 106   | 王进兴 | 男    | 1999-07-30 00:00:00 | 95031 |
| 107   | 张康情 | 男    | 1998-02-10 00:00:00 | 95031 |
| 109   | 王宝春 | 男    | 1998-10-10 00:00:00 | 95031 |
+-------+--------+-------+---------------------+-------+

8： 以c_num升序， defree降序查询score所有记录
mysql> select * from score order by c_num, defree desc;
+-------+-------+--------+
| s_num | c_num | defree |
+-------+-------+--------+
| 109   | 3-105 |     99 |
| 103   | 3-105 |     82 |
| 105   | 3-105 |     75 |
| 103   | 3-166 |     98 |
| 109   | 3-166 |     78 |
| 105   | 3-166 |     67 |
| 103   | 3-245 |     86 |
| 105   | 3-245 |     75 |
| 109   | 3-245 |     68 |
+-------+-------+--------+

首先以c_num升序， 以defree降序
order by 。。。asc, ...desc

9: 查询95301班的学生人数

mysql> select count(*) from student where class='95031';
+----------+
| count(*) |
+----------+
|        5 |
+----------+

10： score中最高分的学生学号和课程号


mysql> select s_num, c_num from score where defree = (select max(defree) from score);
+-------+-------+
| s_num | c_num |
+-------+-------+
| 109   | 3-105 |
+-------+-------+

mysql> select * from score order by defree desc limit 0, 1;
+-------+-------+--------+
| s_num | c_num | defree |
+-------+-------+--------+
| 109   | 3-105 |     99 |
+-------+-------+--------+
1 row in set (0.00 sec)

limit用法，  从第几个开始  一共查几条

11： 查询每门课程的平均成绩

mysql> select avg(defree) from score where c_num='3-105';
+-------------+
| avg(defree) |
+-------------+
|     85.3333 |
+-------------+
1 row in set (0.00 sec)
degree方法计算平均成绩
可以用以上方法一个一个计算

以下方法可以一个sql语句实现

mysql> select c_num, avg(defree) from score group by c_num;
+-------+-------------+
| c_num | avg(defree) |
+-------+-------------+
| 3-105 |     85.3333 |
| 3-166 |     81.0000 |
| 3-245 |     76.3333 |
+-------+-------------+
3 rows in set (0.00 sec)


12 ： 查询score表中至少有两名学生选修 并以3开头的课程的平均分数

课程号以3开头
mysql> select c_num, avg(defree) from score group by c_num having count(c_num)>=2 and c_num like'3%';
+-------+-------------+
| c_num | avg(defree) |
+-------+-------------+
| 3-105 |     85.3333 |
| 3-166 |     81.0000 |
| 3-245 |     76.3333 |
+-------+-------------+
3 rows in set (0.00 sec)

课程号以5结尾
mysql> select c_num, avg(defree) from score group by c_num having count(c_num)>=2 and c_num like'%5';
+-------+-------------+
| c_num | avg(defree) |
+-------+-------------+
| 3-105 |     85.3333 |
| 3-245 |     76.3333 |
+-------+-------------+
2 rows in set (0.00 sec

	‘%’表示任意字符
	like为 模糊查询


13： 查询分数大于70 小于90的s_num列

select s_num defree from score
    -> where defree>70 and defree <90;
+--------+
| defree |
+--------+
| 103    |
| 103    |
| 105    |
| 105    |
| 109    |
+--------+
5 rows in set (0.00 sec)

mysql> select s_num, defree from score
    -> where defree between 70 and 90;
+-------+--------+
| s_num | defree |
+-------+--------+
| 103   |     82 |
| 103   |     86 |
| 105   |     75 |
| 105   |     75 |
| 109   |     78 |
+-------+--------+
5 rows in set (0.00 sec)


这两种操作都可以

14 ： 查询所有学生的 s_name, c_num, defree;

学生的姓名 课程号和成绩不在同一个表， 设计到多表查询

mysql> select s_name, c_num, defree from student, score
    -> where student.s_num=score.s_num;
+--------+-------+--------+
| s_name | c_num | defree |
+--------+-------+--------+
| 赵国顺 | 3-105 |     82 |
| 赵国顺 | 3-166 |     98 |
| 赵国顺 | 3-245 |     86 |
| 赵建威 | 3-105 |     75 |
| 赵建威 | 3-166 |     67 |
| 赵建威 | 3-245 |     75 |
| 王宝春 | 3-105 |     99 |
| 王宝春 | 3-166 |     78 |
| 王宝春 | 3-245 |     68 |
+--------+-------+--------+

15： 查询所有学生的s_num, c_name and defree列

这些字段来分别自学生 课程 成绩表
mysql> select c_num , c_name from course;
+-------+------------+
| c_num | c_name     |
+-------+------------+
| 3-105 | 计算机导论 |
| 3-166 | 数字电路   |
| 3-245 | 操作系统   |
| 9-878 | 高等数学   |
+-------+------------+
4 rows in set (0.00 sec)

mysql> select c_num , s_num, defree from score;
+-------+-------+--------+
| c_num | s_num | defree |
+-------+-------+--------+
| 3-105 | 103   |     82 |
| 3-166 | 103   |     98 |
| 3-245 | 103   |     86 |
| 3-105 | 105   |     75 |
| 3-166 | 105   |     67 |
| 3-245 | 105   |     75 |
| 3-105 | 109   |     99 |
| 3-166 | 109   |     78 |
| 3-245 | 109   |     68 |
+-------+-------+--------+


查询完这两个表之后发现我只要把score表中的c_num换成c_name就可以了
于是进行操作
mysql> select s_num, c_name, defree from course, score
    -> where score.c_num = course.c_num;
+-------+------------+--------+
| s_num | c_name     | defree |
+-------+------------+--------+
| 103   | 计算机导论 |     82 |
| 103   | 数字电路   |     98 |
| 103   | 操作系统   |     86 |
| 105   | 计算机导论 |     75 |
| 105   | 数字电路   |     67 |
| 105   | 操作系统   |     75 |
| 109   | 计算机导论 |     99 |
| 109   | 数字电路   |     78 |
| 109   | 操作系统   |     68 |
+-------+------------+--------+

16： 查询所有学生的s_name, c_name, defree;
这三个数据在三个不同的表中

mysql> select s_name, c_name, defree from student, course, score
    -> where student.s_num = score.s_num and course.c_num = score.c_num;
+--------+------------+--------+
| s_name | c_name     | defree |
+--------+------------+--------+
| 赵国顺 | 计算机导论 |     82 |
| 赵国顺 | 数字电路   |     98 |
| 赵国顺 | 操作系统   |     86 |
| 赵建威 | 计算机导论 |     75 |
| 赵建威 | 数字电路   |     67 |
| 赵建威 | 操作系统   |     75 |
| 王宝春 | 计算机导论 |     99 |
| 王宝春 | 数字电路   |     78 |
| 王宝春 | 操作系统   |     68 |
+--------+------------+--------+


他们之间都是通过共同字段相等来联系的

17： 查询95031班学生每门课的平均分

我们可以先查看student表

mysql> select * from student where class = '95031';
+-------+--------+-------+---------------------+-------+
| s_num | s_name | s_sex | s_birthday          | class |
+-------+--------+-------+---------------------+-------+
| 102   | 王琪   | 女    | 1997-03-21 00:00:00 | 95031 |
| 105   | 赵建威 | 男    | 1999-04-29 00:00:00 | 95031 |
| 106   | 王进兴 | 男    | 1999-07-30 00:00:00 | 95031 |
| 107   | 张康情 | 男    | 1998-02-10 00:00:00 | 95031 |
| 109   | 王宝春 | 男    | 1998-10-10 00:00:00 | 95031 |
+-------+--------+-------+---------------------+-------+

5 rows in set (0.00 sec)

我们可以先获得所有学生的学号， 在小括号内 然后 in 操作可以查到一班所有成绩
mysql> select * from score where s_num in (select s_num from student where class='95031');
+-------+-------+--------+
| s_num | c_num | defree |
+-------+-------+--------+
| 103   | 3-105 |     82 |
| 103   | 3-166 |     98 |
| 103   | 3-245 |     86 |
| 105   | 3-105 |     75 |
| 105   | 3-166 |     67 |
| 105   | 3-245 |     75 |
| 109   | 3-105 |     99 |
| 109   | 3-166 |     78 |
| 109   | 3-245 |     68 |
+-------+-------+--------+
9 rows in set (0.00 sec)


然后用group操作分类计算平均值
mysql> select c_num, avg(defree) from score where s_num in (select s_num from student where class = '95031') group by c_num;
+-------+-------------+
| c_num | avg(defree) |
+-------+-------------+
| 3-105 |     85.3333 |
| 3-166 |     81.0000 |
| 3-245 |     76.3333 |
+-------+-------------+


18： 查询选修3-105课程的成绩高于109号同学的3-105成绩的记录

我们先查询这个同学的成绩
mysql> select defree from score where s_num = '109' and c_num = '3-105';
+--------+
| defree |
+--------+
|     99 |
+--------+
1 row in set (0.00 sec)
这笔分数太高了
换成低于吧
mysql> select * from score where
    -> defree < (select defree from score where s_num='109' and c_num='3-105') and c_num = '3-105';
+-------+-------+--------+
| s_num | c_num | defree |
+-------+-------+--------+
| 103   | 3-105 |     82 |
| 105   | 3-105 |     75 |
+-------+-------+--------+
查询结果如下

19： 查询成绩高于学号为109 课程号为3-105的成绩的所有成绩

	把上一条的and之后的去掉就行

20： 查询和学号101， 108的同学同年出生的s_num, s_name, sbirthday列

	我们先查找这两位同学的数据

mysql> select * from student where s_num in (108, 109);
+-------+--------+-------+---------------------+-------+
| s_num | s_name | s_sex | s_birthday          | class |
+-------+--------+-------+---------------------+-------+
| 108   | 刘清   | 男    | 1998-06-10 00:00:00 | 95033 |
| 109   | 王宝春 | 男    | 1998-10-10 00:00:00 | 95031 |
+-------+--------+-------+---------------------+-------+

然后用year函数可以查到该同学的年份
mysql> select year(s_birthday) from student where s_num in (105, 109);
+------------------+
| year(s_birthday) |
+------------------+
|             1999 |
|             1998 |
+------------------+
2 rows in set (0.00 sec)
mysql> select * from student where
    -> year(s_birthday) in (select year(s_birthday) from student where s_num in (105, 109));
+-------+--------+-------+---------------------+-------+
| s_num | s_name | s_sex | s_birthday          | class |
+-------+--------+-------+---------------------+-------+
| 104   | 刘奕鑫 | 男    | 1999-08-29 00:00:00 | 95033 |
| 105   | 赵建威 | 男    | 1999-04-29 00:00:00 | 95031 |
| 106   | 王进兴 | 男    | 1999-07-30 00:00:00 | 95031 |
| 103   | 赵国顺 | 男    | 1998-06-22 00:00:00 | 95033 |
| 107   | 张康情 | 男    | 1998-02-10 00:00:00 | 95031 |
| 108   | 刘清   | 男    | 1998-06-10 00:00:00 | 95033 |
| 109   | 王宝春 | 男    | 1998-10-10 00:00:00 | 95031 |
+-------+--------+-------+---------------------+-------+

先选出年份， 然后作为条件放进in中进行操作

21： 查询张旭教师任课的学生的成绩

	我们可以先查询到张旭的信息
mysql> select * from teacher where t_name='张旭';
+-------+--------+-------+---------------------+------+----------------+
| t_num | t_name | t_sex | t_birthday          | prof | depart         |
+-------+--------+-------+---------------------+------+----------------+
| 856   | 张旭   | 男    | 1969-03-02 00:00:00 | 讲师 | 机械电子工程系 |
+-------+--------+-------+---------------------+------+----------------+

然后可以查到课程信息
mysql> select * from course where t_num = (select t_num from teacher where t_name = '张旭');
+-------+----------+-------+
| c_num | c_name   | t_num |
+-------+----------+-------+
| 3-166 | 数字电路 | 856   |
+-------+----------+-------+

然后我们可以再套一次娃

mysql> select * from score where
    -> c_num = (select c_num from course where t_num in(
    -> select t_num from teacher where t_name = '张旭'));
+-------+-------+--------+
| s_num | c_num | defree |
+-------+-------+--------+
| 103   | 3-166 |     98 |
| 105   | 3-166 |     67 |
| 109   | 3-166 |     78 |
+-------+-------+--------+
成功， 个人猜测可以套娃好几层


22： 查询选修某课程的同学人数多余5人的教师姓名

mysql> select c_num from score group by c_num having count(*)> 5;
+-------+
| c_num |
+-------+
| 3-105 |
+-------+
我们可以通过这样选择出选课人数大于5的课程
然后老师姓名在teacher表里
score 可以和teacher通过course联系起来


mysql> select t_name from teacher where
    -> t_num in (select t_num from course where
    -> c_num in (select c_num from score
    -> group by c_num having count(*)>5));
+--------+
| t_name |
+--------+
| 王萍   |
+--------+
然后通过这样的多重查找找出来

23： 查询95033班和95031班全体学生的记录
我们先再增加一个班级

mysql> insert into student values('110', '朱广辉', '男', '1998-02-19', '95038');
Query OK, 1 row affected (0.00 sec)

然后可以查看这两个班级信息

mysql> select * from student where class in ('95031', '95033');
+-------+--------+-------+---------------------+-------+
| s_num | s_name | s_sex | s_birthday          | class |
+-------+--------+-------+---------------------+-------+
| 101   | 薛勇   | 男    | 1997-09-01 00:00:00 | 95033 |
| 102   | 王琪   | 女    | 1997-03-21 00:00:00 | 95031 |
| 103   | 赵国顺 | 男    | 1998-06-22 00:00:00 | 95033 |
| 104   | 刘奕鑫 | 男    | 1999-08-29 00:00:00 | 95033 |
| 105   | 赵建威 | 男    | 1999-04-29 00:00:00 | 95031 |
| 106   | 王进兴 | 男    | 1999-07-30 00:00:00 | 95031 |
| 107   | 张康情 | 男    | 1998-02-10 00:00:00 | 95031 |
| 108   | 刘清   | 男    | 1998-06-10 00:00:00 | 95033 |
| 109   | 王宝春 | 男    | 1998-10-10 00:00:00 | 95031 |
+-------+--------+-------+---------------------+-------+

25： 查询所有85分以上成绩的课程的c_num

首先我们先查询所有82分以上看看有没有

mysql> select * from score where defree > 85;
+-------+-------+--------+
| s_num | c_num | defree |
+-------+-------+--------+
| 103   | 3-166 |     98 |
| 103   | 3-245 |     86 |
| 104   | 3-105 |     89 |
| 109   | 3-105 |     99 |
+-------+-------+--------+

有c_num这一列 然后改成
mysql> select c_num from score where defree > 85;
+-------+
| c_num |
+-------+
| 3-166 |
| 3-245 |
| 3-105 |
| 3-105 |
+-------+
就完成了

25： 查询计算机系教师所教课程的成绩表
思路 成绩在成绩表中， 计算机系在教师表中 两者通过course联系
然后套娃就行

select c_num, defree from score where
    -> c_num in (select c_num from course where t_num in
    -> (select t_num from teacher where depart='计算机系'));
+-------+--------+
| c_num | defree |
+-------+--------+
| 3-245 |     86 |
| 3-245 |     75 |
| 3-245 |     68 |
| 3-105 |     69 |
| 3-105 |     79 |
| 3-105 |     82 |
| 3-105 |     89 |
| 3-105 |     75 |
| 3-105 |     99 |
+-------+--------+

26： 查询计算机系与机械电子工程系不同职称的教师的t_name 和 prof
（其实我不太懂题目什么意思）
其实他是看职称，如果机电里有相同职称就不要
然后来此=次套娃 成功选出
mysql> select * from teacher where depart = '计算机系' and prof not in
    -> (select prof from teacher where depart = '机械电子工程系');
+-------+--------+-------+---------------------+--------+----------+
| t_num | t_name | t_sex | t_birthday          | prof   | depart   |
+-------+--------+-------+---------------------+--------+----------+
| 804   | 李诚   | 男    | 1958-12-02 00:00:00 | 副教授 | 计算机系 |
+-------+--------+-------+---------------------+--------+----------+

我们来看一下完整表

mysql> select * from teacher;
+-------+--------+-------+---------------------+--------+----------------+
| t_num | t_name | t_sex | t_birthday          | prof   | depart         |
+-------+--------+-------+---------------------+--------+----------------+
| 804   | 李诚   | 男    | 1958-12-02 00:00:00 | 副教授 | 计算机系       |
| 825   | 王萍   | 女    | 1969-03-02 00:00:00 | 教授   | 计算机系       |
| 831   | 刘冰   | 女    | 1977-08-14 00:00:00 | 教授   | 机械电子工程系 |
| 856   | 张旭   | 男    | 1969-03-02 00:00:00 | 讲师   | 机械电子工程系 |
+-------+--------+-------+---------------------+--------+----------------+


union求并集
27： 查询编号为3-105的课程 且 成绩高于3-245的同学的c_num, s_num defree
并按成绩降序排列
说真的，这老师出的这道题目就很迷惑

mysql> select * from score where c_num = '3-105'
    -> and defree > any(select defree from score where c_num='3-245');
+-------+-------+--------+
| s_num | c_num | defree |
+-------+-------+--------+
| 101   | 3-105 |     69 |
| 102   | 3-105 |     79 |
| 103   | 3-105 |     82 |
| 104   | 3-105 |     89 |
| 105   | 3-105 |     75 |
| 109   | 3-105 |     99 |
+-------+-------+--------+
然后排序 order by defree desc;


any()表示至少 任意一个

28： 题目过于莫名其妙就不抄了

mysql> select * from score where c_num = '3-105'
    -> and defree > all(select defree from score where c_num='3-245')
    -> order by defree desc;
+-------+-------+--------+
| s_num | c_num | defree |
+-------+-------+--------+
| 109   | 3-105 |     99 |
| 104   | 3-105 |     89 |
+-------+-------+--------+
2 rows in set (0.00 sec)

all表示所有

29： 查询所有教师和体哦那个徐的name sex 和 birthday
mysql> select t_name as name, t_sex as sex, t_birthday as birthday from teacher
    -> union
    -> select s_name, s_sex, s_birthday from student;
+--------+-----+---------------------+
| name   | sex | birthday            |
+--------+-----+---------------------+
| 李诚   | 男  | 1958-12-02 00:00:00 |
| 王萍   | 女  | 1969-03-02 00:00:00 |
| 刘冰   | 女  | 1977-08-14 00:00:00 |
| 张旭   | 男  | 1969-03-02 00:00:00 |
| 薛勇   | 男  | 1997-09-01 00:00:00 |
| 王琪   | 女  | 1997-03-21 00:00:00 |
| 赵国顺 | 男  | 1998-06-22 00:00:00 |
| 刘奕鑫 | 男  | 1999-08-29 00:00:00 |
| 赵建威 | 男  | 1999-04-29 00:00:00 |
| 王进兴 | 男  | 1999-07-30 00:00:00 |
| 张康情 | 男  | 1998-02-10 00:00:00 |
| 刘清   | 男  | 1998-06-10 00:00:00 |
| 王宝春 | 男  | 1998-10-10 00:00:00 |
| 朱广辉 | 男  | 1998-02-19 00:00:00 |
+--------+-----+---------------------+

...as ...别名用法
union表示并集


30： 查询所有女教师和女同学的 name， sex ， birhdat
mysql> select t_name as name, t_sex as sex, t_birthday as birthday from teacher where t_sex = '女'
    -> union
    -> select s_name, s_sex, s_birthday from student where s_sex = '女';
+------+-----+---------------------+
| name | sex | birthday            |
+------+-----+---------------------+
| 王萍 | 女  | 1969-03-02 00:00:00 |
| 刘冰 | 女  | 1977-08-14 00:00:00 |
| 王琪 | 女  | 1997-03-21 00:00:00 |
+------+-----+---------------------+

往第29题加两个条件就可以了

31： 查询成绩比该课程平均成绩低的同学的成绩
我们可以通过这种操作查询得平均成绩
mysql> select c_num ,avg(defree) from score group by c_num;
+-------+-------------+
| c_num | avg(defree) |
+-------+-------------+
| 3-105 |     82.1667 |
| 3-166 |     81.0000 |
| 3-245 |     76.3333 |
+-------+-------------+

想象两个表 ab
mysql> select * from score a where defree < (
    -> select avg(defree) from score b where a.c_num = b.c_num);
+-------+-------+--------+
| s_num | c_num | defree |
+-------+-------+--------+
| 101   | 3-105 |     69 |
| 102   | 3-105 |     79 |
| 103   | 3-105 |     82 |
| 105   | 3-105 |     75 |
| 105   | 3-166 |     67 |
| 105   | 3-245 |     75 |
| 109   | 3-166 |     78 |
| 109   | 3-245 |     68 |
+-------+-------+--------+

32： 查询所有任课教师的t_name 和depart

在课程表里有课程才能说明老师任课

mysql> select * from teacher where t_num in(
    -> select t_num from course);
+-------+--------+-------+---------------------+--------+----------------+
| t_num | t_name | t_sex | t_birthday          | prof   | depart         |
+-------+--------+-------+---------------------+--------+----------------+
| 804   | 李诚   | 男    | 1958-12-02 00:00:00 | 副教授 | 计算机系       |
| 825   | 王萍   | 女    | 1969-03-02 00:00:00 | 教授   | 计算机系       |
| 831   | 刘冰   | 女    | 1977-08-14 00:00:00 | 教授   | 机械电子工程系 |
| 856   | 张旭   | 男    | 1969-03-02 00:00:00 | 讲师   | 机械电子工程系 |
+-------+--------+-------+---------------------+--------+----------------+

加上限制就ok了

33： 查询至少含有两名男生的班号

mysql> select class from student where s_sex = '男' group by class having count(*)>1;
+-------+
| class |
+-------+
| 95031 |
| 95033 |
+-------+

34： 查询student表中不姓王的同学的记录

轻松搞定 模糊查询 加not表示否定

mysql> select * from student where s_name not like '王%';
+-------+--------+-------+---------------------+-------+
| s_num | s_name | s_sex | s_birthday          | class |
+-------+--------+-------+---------------------+-------+
| 101   | 薛勇   | 男    | 1997-09-01 00:00:00 | 95033 |
| 103   | 赵国顺 | 男    | 1998-06-22 00:00:00 | 95033 |
| 104   | 刘奕鑫 | 男    | 1999-08-29 00:00:00 | 95033 |
| 105   | 赵建威 | 男    | 1999-04-29 00:00:00 | 95031 |
| 107   | 张康情 | 男    | 1998-02-10 00:00:00 | 95031 |
| 108   | 刘清   | 男    | 1998-06-10 00:00:00 | 95033 |
| 110   | 朱广辉 | 男    | 1998-02-19 00:00:00 | 95038 |
+-------+--------+-------+---------------------+-------+



35： 查询学生表中student每个学生的姓名和年龄

mysql> select s_name, year(now()) - year(s_birthday) as age from student;
+--------+------+
| s_name | age  |
+--------+------+
| 薛勇   |   23 |
| 王琪   |   23 |
| 赵国顺 |   22 |
| 刘奕鑫 |   21 |
| 赵建威 |   21 |
| 王进兴 |   21 |
| 张康情 |   22 |
| 刘清   |   22 |
| 王宝春 |   22 |
| 朱广辉 |   22 |
+--------+------+
10 rows in set (0.00 sec)























